@model List<RestaurantTable>
@{
    ViewData["Title"] = "Waiter Menu Page";
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>POS System</title>
    <style>
        .body {
            margin: 0;
            font-family: Arial, sans-serif;
        }

        .container {
            display: flex;
            width: 100%;
            height: 100vh;
        }

        .tables {
            flex: 60%;
            padding: 20px;
            display: flex;
            flex-wrap: wrap;
            align-content: flex-start;
            background-color: #f5f5f5;
        }

        .table {
            width: 100px; /* Adjust as needed */
            height: 100px; /* Adjust as needed */
            margin: 10px;
            background-color: #fff; /* Light theme */
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            cursor: pointer;
            border: 1px solid #ccc; /* Slightly darker border for depth */
            border-radius: 8px; /* Rounded corners */
            box-shadow: 0 4px 8px rgba(0,0,0,0.1); /* Subtle shadow for 3D effect */
            transition: transform 0.3s ease, box-shadow 0.3s ease; /* Smooth transition for interactions */
        }

            .table:hover {
                transform: translateY(-2px); /* Slight lift effect on hover */
                box-shadow: 0 6px 12px rgba(0,0,0,0.2); /* Deeper shadow on hover for a popping effect */
            }

        .table-content {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 10px;
        }

        .table-number {
            font-size: 1.2em; /* Larger font size for table number */
            font-weight: bold;
            margin-bottom: 5px; /* Spacing between number and bill amount */
        }

        .table-bill-amount {
            font-size: 0.9em;
            color: #555; /* Darker color for text */
        }

        /* Optional: Adding an icon or status indicator */
        .table-status-icon {
            margin-top: 5px;
            height: 20px; /* Adjust as needed */
            width: 20px; /* Adjust as needed */
            background-image: url('path-to-your-icon.png');
            background-size: cover;
            background-position: center;
        }


        .orders {
            flex: 40%;
            padding: 20px;
            background-color: #e5e5e5;
            overflow-y: auto;
        }

        .order-item {
            margin-bottom: 10px;
            padding: 10px;
            background-color: #fff;
            border: 1px solid #ccc;
        }

        .bottom-bar {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 59%; /* Match the width of the tables container */
            background-color: #333;
            color: white;
            padding: 10px 20px;
            display: flex;
            justify-content: space-between;
            box-sizing: border-box; /* Include padding in the width calculation */
        }

    </style>
</head>

  <body>
    <div class="container">
        <div class="tables">
            @foreach (var table in Model)
            {
                <div class="table" data-table-id="@table.TableId" onclick="loadOrdersForTable(@table.TableId)">
                    <div>@table.TableName</div>
                   
                    <div>Capacity: @table.Capacity</div>
                    <div>Occupancy: @table.Occupancy</div>
                </div>
            }
        </div>
        <div class="orders">
            <!-- Order items will be loaded here -->
        </div>
    </div>

    <div class="bottom-bar">
        <button onclick="createOrder()" >Create Order</button>
        <button>See Orders</button>
    </div>

    <script>
        let currentTableId = 0;
        function loadOrdersForTable(tableId) {
            currentTableId = tableId;
            fetch(`/Server/GetAllOrderDetailsForTable?tableId=${tableId}`)
                .then(response => response.text()) // Expecting HTML response
                .then(html => {
                    const ordersContainer = document.querySelector('.orders');
                    ordersContainer.innerHTML = html; // Insert the HTML directly
                })
                .catch(error => console.error('Error loading orders:', error));
        }

        function createOrder() {
            console.log(currentTableId);
            var id = Number(currentTableId);
            fetch(`/Server/ServerOrderView/tableId=${id}`, {
                method: 'GET',
               
            })
        }

   
        function approveOrder(element) {
            // Retrieve the orderItemId from the data-order-item-id attribute
            var orderItemId = element.getAttribute('data-order-item-id');
            var tableId = element.getAttribute('data-table-id');

            const trimmedOrderId = orderItemId.trim();
            const numericOrderId = Number(trimmedOrderId);
           
            const trimmedTableId = tableId.trim();
            const numericTableId = Number(trimmedTableId);

            fetch(`/Server/ApproveOrder?orderItemId=${numericOrderId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                   
                },
              
            })
                .then(response => {
                    if (response.ok) {
                       
                        loadOrdersForTable(numericTableId);
                    } else {
                        alert("Failed to approve order.");
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert("An error occurred while approving the order.");
                });
        }
    
        function cancelOrder(element) {
            // Retrieve the orderItemId from the data-order-item-id attribute
            var orderItemId = element.getAttribute('data-order-item-id');
            var tableId = element.getAttribute('data-table-id');

            const trimmedOrderId = orderItemId.trim();
            const numericOrderId = Number(trimmedOrderId);

            const trimmedTableId = tableId.trim();
            const numericTableId = Number(trimmedTableId);

            fetch(`/Server/CancelOrderItemByOrderItemId?orderItemId=${numericOrderId}`, {
                method: 'DELETE'
            })
            
                .then(response => {
                    console.log(response)
                    if (response.ok) {
                       
                        loadOrdersForTable(numericTableId);
                    } else {
                        alert("Failed to cancel order.");
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert("An error occurred while approving the order.");
                });
        }
    </script>

    
  </body>

</html>
